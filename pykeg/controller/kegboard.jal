-- kegboard jal source v10
-- (c) mike wakerly 2003-2006
-- http://hoho.com/mike/kegbot

include 16f628_defs
include delay_20mc
include jascii

-- -----------------------------------------------------------------------------
-- copy of rs232_hw_ins
-- -----------------------------------------------------------------------------
    const usart_asynch = true      ;true = RS232, false = SPI
    const baudrate     = 115_200   ;Baudrate
    -- Here all the routines are made available
    -- and the initialization is called based upon the above parameters
    -- Because the hardware USART is used no pin declarations are needed
    include rs232_hw
-- -----------------------------------------------------------------------------
-- END of copy of rs232_hw_ins
-- -----------------------------------------------------------------------------

-- -----------------------------------------------------------------------------
-- CONTROL COMMANDS
-- -----------------------------------------------------------------------------
const byte CMD_STATUS = 0x81 -- just send the current status
const byte CMD_VALVEON = 0x83 -- enable solenoid valve
const byte CMD_VALVEOFF = 0x84 -- disable solenoid valve
const byte CMD_PUSHTICKS = 0x87 -- enable pushing of ticks
const byte CMD_NOPUSHTICKS = 0x88 -- disable pushing of ticks
const byte CMD_FRIDGEON = 0x90 -- enable the freezer relay
const byte CMD_FRIDGEOFF = 0x91 -- disable the freezer relay
const byte CMD_READTEMP = 0x93 -- unused, yet

-- -----------------------------------------------------------------------------
-- FRAMING CONSTANTS
-- -----------------------------------------------------------------------------
const byte CMD_START_0 = "M"
const byte CMD_START_1 = ":"
const byte CMD_END_0 = ASCII_CR   -- "\r"
const byte CMD_END_1 = ASCII_LF   -- "\n"

-- -----------------------------------------------------------------------------
-- PACKET TYPES
-- -----------------------------------------------------------------------------
const byte PKT_TYPE_STATUS = 0x01 -- a status packet

-- -----------------------------------------------------------------------------
-- INITIAL PIN STATE
-- -----------------------------------------------------------------------------
port_a_direction = all_output

-- valve output pins
pin_b4_direction = output
pin_b5_direction = output
pin_b6_direction = output

-- configure ccp input
pin_b3_direction = input

-- -----------------------------------------------------------------------------
-- INTERRUPT & IO CONFIG
-- -----------------------------------------------------------------------------
-- set port a to normal digital i/o
CMCON = 0x07

-- first 4:  dont care
-- second 4: capture mode:
-- 0100: every falling edge
-- 0101: every rising edge
-- 0110: every 4th rising edge
-- 0111: every 16th rising edge
CCP1CON = 0b_0000_0101

-- given 2200 pulses/liter,
-- on 0110, every bit == 1/550th Liter;
-- every flow_high bit == 256/550 Liter

-- -----------------------------------------------------------------------------
-- VARIABLES
-- -----------------------------------------------------------------------------
var byte flow_low = 0
var byte flow_high = 0
var volatile byte counter_low = 0
var volatile byte counter_mid = 0
var volatile byte counter_high = 0

-- -----------------------------------------------------------------------------
-- PULSE COUNTER ISR
-- -----------------------------------------------------------------------------
procedure ISR is
  pragma interrupt
  ;bank_0
  if CCP1IF == high then CCP1IF = low
    flow_low = flow_low + 1
    if flow_low == 0 then
      flow_high = flow_high + 1
    end if
  end if
end procedure

-- -----------------------------------------------------------------------------
-- INTERRUPT CONFIG
-- -----------------------------------------------------------------------------
bank_1
GIE  = high         -- enable global interrupts
RBIE = low          -- DISABLE interrupts on change
T0IE = low          -- DISABLE tmr0 interrupts
INTE = low          -- disable external interrupt (on rb0)
INTF = low          -- clear INT flag
;intcon_eeie = high -- RISING EDGE triggered
_CCP1IE = high      -- enable ccp interrupt
PEIE = high         -- enable perhipheral interrupt (ccp)
bank_0

-- serial input
var byte x
var byte temp
var bit pushticks = low
var byte fridgestatus = 2
var byte valvestatus = 0
var bit sendstatus = high

-- temporary tick bytes
var byte tmp_low = 0
var byte tmp_high = 0

-- disable the solenoid
pin_b4 = off

-- don't change the fridge

-- -----------------------------------------------------------------------------
-- MAIN LOOP
-- -----------------------------------------------------------------------------
forever loop
  -- handle serial events
  if asynch_read_hw(x) & high then
    -- assume we have a known command, so send the status afterward (clear
    -- in catch-all else block at bottom)
    sendstatus = high
    if x == CMD_STATUS then
      sendstatus = high -- redundant
    elsif x == CMD_VALVEON then
      valvestatus = 1
      pin_b4 = high
    elsif x == CMD_VALVEOFF then
      valvestatus = 0
      pin_b4 = low
    elsif x == CMD_FRIDGEON then
      pin_b5 = off
      pin_b6 = on
      delay_100ms( 1 )
      pin_b6 = off
      fridgestatus = 1
    elsif x == CMD_FRIDGEOFF then
      pin_b6 = off
      pin_b5 = on
      delay_100ms( 1 )
      pin_b5 = off
      fridgestatus = 0
    else
      sendstatus = low
    end if
  end if

  -- send a status packet.

  -- the format is (one byte per []):
  -- ["M"][":"]
  -- [PKT_TYPE=status]
  -- [relay status bitmask]
  -- [newticks_high][newticks_low]
  -- ["\r"]["\n"]

  if sendstatus == high then
    sendstatus = low
    -- disable interrupts
    -- GIE = low
    tmp_low = flow_low
    flow_low = 0
    tmp_high = flow_high
    flow_high = 0
    -- GIE = high

    asynch_send_hw( CMD_START_0 )
    asynch_send_hw( CMD_START_1 )

    asynch_send_hw( PKT_TYPE_STATUS )
    asynch_send_hw( fridgestatus )
    asynch_send_hw( valvestatus )
    asynch_send_hw( tmp_high )
    asynch_send_hw( tmp_low )

    asynch_send_hw( CMD_END_0 )
    asynch_send_hw( CMD_END_1 )
    count_low = 0
    count_high = 0
  end if

end loop

